#!/usr/bin/env python
PACKAGE = "poses_scanner_node"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()
#           Name    Type  ReconfigureLevel    Description   Default   Min   Max
gen.add("zmin_70", double_t, 0, "Minimum z value (meters) to apply to passthrough filter at latitude 70", -0.003, -0.1, 0.1)
gen.add("zmin_50", double_t, 0, "Minimum z value (meters) to apply to passthrough filter at latitude 50", -0.003, -0.1, 0.1)
gen.add("zmin_30", double_t, 0, "Minimum z value (meters) to apply to passthrough filter at latitude 30", -0.003, -0.1, 0.1)

gen.add("segment_70", bool_t, 0, "Apply plane segmentation, after passthrough filter, at latitude 70", True)
gen.add("segment_50", bool_t, 0, "Apply plane segmentation, after passthrough filter, at latitude 50", True)
gen.add("segment_30", bool_t, 0, "Apply plane segmentation, after passthrough filter, at latitude 30", True)
gen.add("tolerance_70", double_t, 0, "Plane segmentation tolerance at latitude 70", 0.005, 0.0001, 0.1)
gen.add("tolerance_50", double_t, 0, "Plane segmentation tolerance at latitude 50", 0.005, 0.0001, 0.1)
gen.add("tolerance_30", double_t, 0, "Plane segmentation tolerance at latitude 30", 0.005, 0.0001, 0.1)

gen.add("outlier_removal_70", bool_t, 0, "Apply a Radius Outlier Removal Filter, after plane segmentation, at latitude 70", True)
gen.add("outlier_removal_50", bool_t, 0, "Apply a Radius Outlier Removal Filter, after plane segmentation, at latitude 50", True)
gen.add("outlier_removal_30", bool_t, 0, "Apply a Radius Outlier Removal Filter, after plane segmentation, at latitude 30", True)
gen.add("radius_search_70", double_t, 0, "Search radius for determining neighborhood of points at latitude 70", 0.01, 0.0001, 0.2)
gen.add("radius_search_50", double_t, 0, "Search radius for determining neighborhood of points at latitude 50", 0.01, 0.0001, 0.2)
gen.add("radius_search_30", double_t, 0, "Search radius for determining neighborhood of points at latitude 30", 0.01, 0.0001, 0.2)
gen.add("neighbors_70", int_t, 0, "If a point has not at least this number of neighbors it is considered an outlier and thus removed. Applied to the filter at latitude 70", 35, 1, 800)
gen.add("neighbors_50", int_t, 0, "If a point has not at least this number of neighbors it is considered an outlier and thus removed. Applied to the filter at latitude 50", 35, 1, 800)
gen.add("neighbors_30", int_t, 0, "If a point has not at least this number of neighbors it is considered an outlier and thus removed. Applied to the filter at latitude 30", 35, 1, 800)

gen.add("clustering_70", bool_t, 0, "Apply Euclidean Clustering and concatenate found clusters at latitude 70", False)
gen.add("clustering_50", bool_t, 0, "Apply Euclidean Clustering and concatenate found clusters at latitude 50", False)
gen.add("clustering_30", bool_t, 0, "Apply Euclidean Clustering and concatenate found clusters at latitude 30", False)
gen.add("clus_tolerance_70", double_t, 0, "Euclidean tolearance in separating clusters, at latitude 70", 0.008, 0.0001, 0.1)
gen.add("clus_tolerance_50", double_t, 0, "Euclidean tolearance in separating clusters, at latitude 50", 0.008, 0.0001, 0.1)
gen.add("clus_tolerance_30", double_t, 0, "Euclidean tolearance in separating clusters, at latitude 30", 0.008, 0.0001, 0.1)
gen.add("min_points_70", int_t, 0, "Minimum number of points a cluster must have to be considered such, at latitude 70", 200, 1, 5000)
gen.add("min_points_50", int_t, 0, "Minimum number of points a cluster must have to be considered such, at latitude 50", 200, 1, 5000)
gen.add("min_points_30", int_t, 0, "Minimum number of points a cluster must have to be considered such, at latitude 30", 200, 1, 5000)

exit(gen.generate(PACKAGE, "poses_scanner_node", "poses_scanner"))
